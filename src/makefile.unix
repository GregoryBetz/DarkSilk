# Copyright (c) 2009-2016 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=0
USE_WALLET:=1

LINK:=$(CXX)
ARCH:=$(system lscpu | head -n 1 | awk '{print $2}')

DEFS += -DBOOST_SPIRIT_THREADSAFE
DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
endif

LIBS += \
 -Wl,-B$(LMODE)

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l cryptopp \
   -l crypto

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread

# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
HARDENING+=-fPIE
LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g


ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif


# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-O2 $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)


OBJS= \
    obj/alert.o \
    obj/allocators.o \
    obj/cleanse.o \
    obj/core_read.o \
    obj/core_write.o \
    obj/gen.o \
    obj/univalue.o \
    obj/univalue_read.o \
    obj/univalue_write.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/base58.o \
    obj/bloom.o \
    obj/crypter.o \
    obj/chain.o \
    obj/key.o \
    obj/init.o \
    obj/pubkey.o \
    obj/ecwrapper.o \
    obj/darksilkd.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/random.o \
    obj/rpc/rpcclient.o \
    obj/rpc/rpcprotocol.o \
    obj/rpc/rpcserver.o \
    obj/rpc/rpcmisc.o \
    obj/rpc/rpcnet.o \
    obj/rpc/rpcblockchain.o \
    obj/rpc/rpcrawtransaction.o \
    obj/rpc/rpcsmessage.o \
    obj/timedata.o \
    obj/script/script.o \
    obj/script/script_error.o \
    obj/sync.o \
    obj/txmempool.o \
    obj/util.o \
    obj/utilstrencodings.o \
    obj/utilmoneystr.o \
    obj/hash.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/chainparams.o \
    obj/anon/stealth/stealth.o \
    obj/anon/stormnode/activestormnode.o \
    obj/anon/sandstorm/sandstorm.o \
    obj/anon/sandstorm/sandstorm-relay.o \
    obj/anon/instantx/instantx.o \
    obj/anon/stormnode/stormnodeconfig.o \
    obj/anon/stormnode/stormnodeman.o \
    obj/anon/stormnode/stormnode.o \
    obj/anon/stormnode/stormnode-budget.o \
    obj/anon/stormnode/stormnode-payments.o \
    obj/anon/stormnode/stormnode-sync.o \
    obj/rpc/rpcstormnode.o \
    obj/rpc/rpcstormnode-budget.o \
    obj/anon/stormnode/spork.o \
    obj/crypto/hmac_sha256.o \
    obj/crypto/hmac_sha512.o \
    obj/crypto/rfc6979_hmac_sha256.o \
    obj/crypto/ripemd160.o \
    obj/crypto/sha1.o \
    obj/crypto/sha256.o \
    obj/crypto/sha512.o \
    obj/smessage.o \
    obj/coins.o \
    obj/script/compressor.o \
    obj/primitives/transaction.o \
    obj/primitives/block.o \
    obj/services/account.o \
    obj/services/cert.o \
    obj/services/escrow.o \
    obj/services/message.o \
    obj/services/messagecrypter.o \
    obj/services/offer.o \
    obj/leveldbwrapper.o \
    obj/amount.o \
    obj/undo.o \
    obj/uint256.o \
    obj/txdb.o \
    obj/cryptkey.o \
    obj/blindtext.o \
    obj/rpc/rpcblindtext.o \
    obj/rpc/rpccrypt.o \
    obj/cryptogram/cryptogram.o \
    obj/cryptogram/ecies.o \
    obj/compat/glibc_sanity.o \
    obj/compat/glibcxx_sanity.o \
    obj/crypto/argon2/argon2.o \
    obj/crypto/argon2/core.o \
    obj/crypto/argon2/encoding.o \
    obj/crypto/argon2/thread.o \
    obj/crypto/argon2/opt.o \
    obj/crypto/argon2/blake2/blake2b.o \
    obj/utilstrencodings.o

ifdef USE_NATIVE_I2P
        OBJS += obj/i2p/i2p.o
        OBJS += obj/i2p/i2psam.o
endif

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
    obj/miner.o \
    obj/rpc/rpcmining.o \
    obj/wallet/db.o \
    obj/wallet/rpcdump.o \
    obj/wallet/rpcwallet.o \
    obj/wallet/wallet.o \
    obj/wallet/wallet_ismine.o \
    obj/wallet/walletdb.o
endif

all: darksilkd

# libsecp256k1 support
LIBS += $(CURDIR)/secp256k1/src/libsecp256k1_la-secp256k1.o 
DEFS += $(addprefix -I,$(CURDIR)/secp256k1/include)

# build leveldb	
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers/memenv)

OBJS += obj/txdb-leveldb.o

leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..;
obj/txdb-leveldb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/crypto/argon2/%.o: crypto/argon2/%.c 
	gcc -c $(xCXXFLAGS) -MMD -o $@ $<

obj/crypto/argon2/blake2/%.o: crypto/argon2/blake2/%.c 
	gcc -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

darksilkd: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f darksilkd
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f obj/build.h
	-rm -f obj/crypto/*.o
	-rm -f obj/crypto/*.P
	-rm -f obj/crypto/*.d
	-rm -f obj/primitives/*.o
	-rm -f obj/primitives/*.P
	-rm -f obj/primitives/*.d
	-rm -f obj/crypto/argon2/*.o
	-rm -f obj/crypto/argon2/*.P
	-rm -f obj/crypto/argon2/*.d
	-rm -f obj/crypto/argon2/blake2/*.o
	-rm -f obj/crypto/argon2/blake2/*.P
	-rm -f obj/crypto/argon2/blake2/*.d
	cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..
	cd secp256k1 && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..

FORCE:
