# -*- mode: Makefile; -*-
# Copyright (c) 2011-2016 Bitcoin Developers

# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for darksilk
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CXX=g++
DEPSDIR=/usr/local

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)/include/berkeley-db4"

LIBPATHS= \
 -L"$(DEPSDIR)/lib" \
 -L"$(DEPSDIR)/Cellar/berkeley-db4/4.8.30/lib"

USE_UPNP:=1
USE_WALLET:=1

LIBS= -dead_strip

ifdef STATIC
# Build STATIC if you are redistributing the darksilkd binary
LIBS += \
 $(DEPSDIR)/lib/db48/libdb_cxx-4.8.a \
 $(DEPSDIR)/lib/libboost_system.a \
 $(DEPSDIR)/lib/libboost_filesystem.a \
 $(DEPSDIR)/lib/libboost_program_options.a \
 $(DEPSDIR)/lib/libboost_thread.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 -lz
else
LIBS += \
 -ldb_cxx-4.8 \
 -lboost_system \
 -lboost_filesystem \
 -lboost_program_options \
 -lboost_thread \
 -lboost_chrono \
 -lssl \
 -lcrypto \
 -lz \
 -levent
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CFLAGS = -mmacosx-version-min=10.5 -arch x86_64 -O2 -msse2
else
CFLAGS = -g -msse2
endif

# ppc doesn't work because we don't support big-endian
CFLAGS += -Wall -Wextra -Wformat -Wno-ignored-qualifiers -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS= \
    obj/alert.o \
    obj/allocators.o \
    obj/bloom.o \
    obj/cleanse.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/base58.o \
    obj/crypter.o \
    obj/chain.o \
    obj/key.o \
    obj/init.o \
    obj/pubkey.o \
    obj/ecwrapper.o \
    obj/darksilkd.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/random.o \
    obj/scheduler.o \
    obj/rpc/rpcclient.o \
    obj/rpc/rpcprotocol.o \
    obj/rpc/rpcserver.o \
    obj/rpc/rpcmisc.o \
    obj/rpc/rpcnet.o \
    obj/rpc/rpcblockchain.o \
    obj/rpc/rpcrawtransaction.o \
    obj/rpc/rpcsmessage.o \
    obj/timedata.o \
    obj/script/script.o \
    obj/script/script_error.o \
    obj/sync.o \
    obj/txmempool.o \
    obj/ui_interface.o \
    obj/util.o \
    obj/utilstrencodings.o \
    obj/utilmoneystr.o \
    obj/utiltime.o \
    obj/hash.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/chainparams.o \
    obj/anon/stealth/stealth.o \
    obj/anon/stormnode/activestormnode.o \
    obj/anon/sandstorm/sandstorm.o \
    obj/anon/sandstorm/sandstorm-relay.o \
    obj/anon/instantx/instantx.o \
    obj/anon/stormnode/stormnodeconfig.o \
    obj/anon/stormnode/stormnodeman.o \
    obj/anon/stormnode/stormnode.o \
    obj/anon/stormnode/stormnode-budget.o \
    obj/anon/stormnode/stormnode-payments.o \
    obj/anon/stormnode/stormnode-sync.o \
    obj/rpc/rpcstormnode.o \
    obj/rpc/rpcstormnode-budget.o \
    obj/anon/stormnode/spork.o \
    obj/crypto/hmac_sha256.o \
    obj/crypto/hmac_sha512.o \
    obj/crypto/rfc6979_hmac_sha256.o \
    obj/crypto/ripemd160.o \
    obj/crypto/sha1.o \
    obj/crypto/sha256.o \
    obj/crypto/sha512.o \
    obj/smessage.o \
    obj/coins.o \
    obj/script/compressor.o \
    obj/primitives/transaction.o \
    obj/primitives/block.o \
    obj/leveldbwrapper.o \
    obj/amount.o \
    obj/undo.o \
    obj/uint256.o \
    obj/txdb.o \
    obj/rest.o \
    obj/compat/glibc_sanity.o \
    obj/compat/glibcxx_sanity.o \
    obj/crypto/argon2/argon2.o \
    obj/crypto/argon2/core.o \
    obj/crypto/argon2/encoding.o \
    obj/crypto/argon2/thread.o \
    obj/crypto/argon2/opt.o \
    obj/crypto/argon2/blake2/blake2b.o\
    obj/crypto/aes.o \
    obj/utilstrencodings.o

ifdef USE_NATIVE_I2P
        OBJS += obj/i2p/i2p.o
        OBJS += obj/i2p/i2psam.o
endif

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
    obj/miner.o \
    obj/rpc/rpcmining.o \
    obj/wallet/db.o \
    obj/wallet/rpcdump.o \
    obj/wallet/rpcwallet.o \
    obj/wallet/wallet.o \
    obj/wallet/wallet_ismine.o \
    obj/wallet/walletdb.o
endif

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	DEFS += -DUSE_UPNP=$(USE_UPNP)
ifdef STATIC
	LIBS += $(DEPSDIR)/lib/libminiupnpc.a
else
	LIBS += -lminiupnpc
endif
endif

all: darksilkd

# build libsecp256k1
LIBS += $(CURDIR)/secp256k1/src/libsecp256k1_la-secp256k1.o 
DEFS += $(addprefix -I,$(CURDIR)/secp256k1/include)

OBJS +=  obj/script/script.o
secp256k1/src/libsecp256k1_la-secp256k1.o:
	@echo "Building Secp256k1 ..."; cd secp256k1; ./autogen.sh ; ./configure --disable-shared --with-pic --with-bignum=no --enable-module-recovery ; make; cd ..;
obj/scrypt.o: secp256k1/src/libsecp256k1_la-secp256k1.o

# build leveldb
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers/memenv)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

# build univalue
LIBS += $(CURDIR)/univalue/lib/libunivalue_la-univalue.o $(CURDIR)/univalue/lib/libunivalue_la-univalue_read.o $(CURDIR)/univalue/lib/libunivalue_la-univalue_write.o
DEFS += $(addprefix -I,$(CURDIR)/univalue/include)

OBJS += obj/core_read.o \
        obj/core_write.o

univalue/lib/libunivalue_la-univalue.o:
	@echo "Building Univalue ..."; cd univalue; ./autogen.sh ; ./configure ; make; cd ..;
obj/core_read.o: univalue/lib/libunivalue_la-univalue.o

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/crypto/argon2/%.o: crypto/argon2/%.c 
	gcc -c $(xCXXFLAGS) -MMD -o $@ $<

obj/crypto/argon2/blake2/%.o: crypto/argon2/blake2/%.c 
	gcc -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

darksilkd: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f darksilkd
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f obj/build.h
	-rm -f obj/crypto/*.o
	-rm -f obj/crypto/*.P
	-rm -f obj/crypto/*.d
	-rm -f obj/primitives/*.o
	-rm -f obj/primitives/*.P
	-rm -f obj/primitives/*.d
	-rm -f obj/crypto/argon2/*.o
	-rm -f obj/crypto/argon2/*.P
	-rm -f obj/crypto/argon2/*.d
	-rm -f obj/crypto/argon2/blake2/*.o
	-rm -f obj/crypto/argon2/blake2/*.P
	-rm -f obj/crypto/argon2/blake2/*.d
	cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..
	cd secp256k1 && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..


FORCE:
