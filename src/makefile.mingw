# Copyright (c) 2009-2016 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=1
USE_WALLET:=1
USE_NATIVE_I2P:=1

INCLUDEPATHS= \
 -I"C:\Develop\deps\boost_1_59_0" \
 -I"C:\Develop\deps\db-4.8.30.NC\build_unix" \
 -I"C:\Develop\deps\openssl-1.0.2d\include" \
 -I"$(abspath obj)" \
 -I"$(CURDIR)"

LIBPATHS= \
 -L"C:\Develop\deps\boost_1_59_0\bin.v2\libs" \
 -L"C:\Develop\deps\db-4.8.30.NC\build_unix" \
 -L"C:\Develop\deps\openssl-1.0.2d\lib"

LIBS= \
 -l boost_system-mgw49-mt-s-1_59 \
 -l boost_filesystem-mgw49-mt-s-1_59 \
 -l boost_program_options-mgw49-mt-s-1_59 \
 -l boost_thread-mgw49-mt-s-1_59 \
 -l boost_chrono-mgw49-mt-s-1_59 \
 -l db_cxx \
 -l ssl \
 -l crypto \
 -l z

DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE
DEBUGFLAGS=-g
CFLAGS=-O3 -msse2 -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -static -static-libgcc -static-libstdc++

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
  INCLUDEPATHS += -I"C:\Develop\deps\miniupnpc-1.9\include"
  LIBPATHS += -L"C:\Develop\deps\miniupnpc-1.9\lib"
  LIBS += -l miniupnpc -l iphlpapi
  DEFS += -DMINIUPNP_STATICLIB -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/allocators.o \
    obj/bloom.o \
    obj/cleanse.o \
    obj/core_read.o \
    obj/core_write.o \
    obj/gen.o \
    obj/univalue.o \
    obj/univalue_read.o \
    obj/univalue_write.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/base58.o \
    obj/crypter.o \
    obj/chain.o \
    obj/key.o \
    obj/init.o \
    obj/pubkey.o \
    obj/ecwrapper.o \
    obj/darksilkd.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/policy/policy.o \
    obj/random.o \
    obj/rpc/rpcclient.o \
    obj/rpc/rpcprotocol.o \
    obj/rpc/rpcserver.o \
    obj/rpc/rpcmisc.o \
    obj/rpc/rpcnet.o \
    obj/rpc/rpcblockchain.o \
    obj/rpc/rpcrawtransaction.o \
    obj/rpc/rpcsmessage.o \
    obj/timedata.o \
    obj/script/interpreter.o \
    obj/script/script.o \
    obj/script/script_error.o \
    obj/script/sign.o \
    obj/script/standard.o \
    obj/sync.o \
    obj/txmempool.o \
    obj/util.o \
    obj/utilstrencodings.o \
    obj/utilmoneystr.o \
    obj/hash.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/chainparams.o \
    obj/anon/stealth/stealth.o \
    obj/anon/stormnode/activestormnode.o \
    obj/anon/sandstorm/sandstorm.o \
    obj/anon/sandstorm/sandstorm-relay.o \
    obj/anon/instantx/instantx.o \
    obj/anon/stormnode/stormnodeconfig.o \
    obj/anon/stormnode/stormnodeman.o \
    obj/anon/stormnode/stormnode.o \
    obj/anon/stormnode/stormnode-budget.o \
    obj/anon/stormnode/stormnode-payments.o \
    obj/anon/stormnode/stormnode-sync.o \
    obj/rpc/rpcstormnode.o \
    obj/rpc/rpcstormnode-budget.o \
    obj/anon/stormnode/spork.o \
    obj/crypto/hmac_sha256.o \
    obj/crypto/hmac_sha512.o \
    obj/crypto/rfc6979_hmac_sha256.o \
    obj/crypto/ripemd160.o \
    obj/crypto/sha1.o \
    obj/crypto/sha256.o \
    obj/crypto/sha512.o \
    obj/smessage.o \
    obj/coins.o \
    obj/script/compressor.o \
    obj/primitives/transaction.o \
    obj/primitives/block.o \
    obj/leveldbwrapper.o \
    obj/amount.o \
    obj/undo.o \
    obj/uint256.o \
    obj/txdb.o \
    obj/compat/glibc_sanity.o \
    obj/compat/glibcxx_sanity.o \
    obj/crypto/argon2/argon2.o \
    obj/crypto/argon2/core.o \
    obj/crypto/argon2/encoding.o \
    obj/crypto/argon2/thread.o \
    obj/crypto/argon2/opt.o \
    obj/crypto/argon2/blake2/blake2b.o \
    obj/utilstrencodings.o

ifdef USE_NATIVE_I2P
        OBJS += obj/i2p/i2p.o
        OBJS += obj/i2p/i2psam.o
endif

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
    obj/miner.o \
    obj/rpc/rpcmining.o \
    obj/wallet/db.o \
    obj/wallet/rpcdump.o \
    obj/wallet/rpcwallet.o \
    obj/wallet/wallet.o \
    obj/wallet/walletdb.o
endif

all: darksilkd.exe

# libsecp256k1 support
LIBS += $(CURDIR)/secp256k1/src/libsecp256k1_la-secp256k1.o
DEFS += $(addprefix -I,$(CURDIR)/secp256k1/include)

# build leveldb
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers/memenv)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb TARGET_OS=NATIVE_WINDOWS make libleveldb.a libmemenv.a cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

$(shell cp -rp $(abspath crypto) obj >/dev/null)

obj/build.h: FORCE
	sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -fpermissive -o $@ $<

obj/crypto/argon2/%.o: crypto/argon2/%.c 
	gcc -c $(xCXXFLAGS) -MMD -o $@ $<

obj/crypto/argon2/blake2/%.o: crypto/argon2/blake2/%.c 
	gcc -c $(xCXXFLAGS) -MMD -o $@ $<

darksilkd.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -lshlwapi
	strip darksilkd.exe

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

clean:
	-rm -f darksilkd
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f obj/build.h
	-rm -f obj/crypto/*.o
	-rm -f obj/crypto/*.P
	-rm -f obj/crypto/*.d
	-rm -f obj/primitives/*.o
	-rm -f obj/primitives/*.P
	-rm -f obj/primitives/*.d
	-rm -f obj/crypto/argon2/*.o
	-rm -f obj/crypto/argon2/*.P
	-rm -f obj/crypto/argon2/*.d
	-rm -f obj/crypto/argon2/blake2/*.o
	-rm -f obj/crypto/argon2/blake2/*.P
	-rm -f obj/crypto/argon2/blake2/*.d
	cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..
	cd secp256k1 && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..


FORCE:
